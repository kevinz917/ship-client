[{"/Users/maxyuan/Documents/GitHub/ship-client/src/components/VoteCard.js":"1","/Users/maxyuan/Documents/GitHub/ship-client/src/pages/about.js":"2","/Users/maxyuan/Documents/GitHub/ship-client/src/pages/profile.js":"3"},{"size":5364,"mtime":1613189528960,"results":"4","hashOfConfig":"5"},{"size":7050,"mtime":1613189635653,"results":"6","hashOfConfig":"5"},{"size":6695,"mtime":1613189842869,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"12wojvm",{"filePath":"10","messages":"11","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/Users/maxyuan/Documents/GitHub/ship-client/src/components/VoteCard.js",["15"],"/Users/maxyuan/Documents/GitHub/ship-client/src/pages/about.js",["16","17","18","19","20","21","22","23"],"/Users/maxyuan/Documents/GitHub/ship-client/src/pages/profile.js",["24"],"import { useEffect, useState } from \"react\";\nimport { Row } from \"react-bootstrap\";\nimport { Header2 } from \"../global_styles/typography\";\nimport { MainBtn } from \"../global_styles/button\";\nimport { fetchUser, TogglePrivacy } from \"../api/user\";\nimport { fetchMyShips, removeShip } from \"../api/ship\";\nimport { Body } from \"../global_styles/typography\";\nimport { Spinner } from \"../components/LoadingSpinner\";\nimport Votecard from \"../components/VoteCard\";\nimport { sendAmplitudeData } from \"../util/amplitude\";\nimport { Formik, Field, Form } from \"formik\";\nimport { SaveAnswers } from \"../api/user\";\nimport styled from \"styled-components\";\n\nimport \"../global_styles/other.css\";\n// import { COOKIE_DOMAIN } from \"../util/base\";\n\nconst StyledField = styled(Field)`\n  @media (max-width: 450px) {\n    width: 100% !important;\n  }\n`;\n\nconst sortFunc = (a, b) => {\n  const a_votes = a.votes + 10 * ((a.shippers ? a.shippers : 1) - 1);\n  const b_votes = b.votes + 10 * ((b.shippers ? b.shippers : 1) - 1);\n  return a_votes > b_votes ? -1 : 1;\n};\n\nconst Profile = () => {\n  sendAmplitudeData(\"visit_profile\");\n\n  const [userInfo, setUserInfo] = useState({ privacy: null });\n  const [isLoading, setIsloading] = useState(false);\n  const [isChanging, setIsChanging] = useState(false);\n  const [myShips, setMyShips] = useState([]);\n\n  const info = {\n    private:\n      \"If toggled to private, ships involving you will not show up on the leaderboard. You also will not be able to create any ships (but your previous ships will be saved).\",\n    public: \"Others can vote on ships that include you\",\n  };\n\n  useEffect(() => {\n    const onMount = async () => {\n      setIsloading(true);\n      let fetchedUser = await fetchUser();\n      setUserInfo(fetchedUser);\n\n      let fetchedShips = await fetchMyShips();\n      fetchedShips.sort(sortFunc);\n      setMyShips(fetchedShips);\n\n      setIsloading(false);\n    };\n\n    onMount();\n  }, []);\n\n  const togglePrivacy = async () => {\n    setIsChanging(true);\n    if (userInfo.privacy === \"public\") {\n      sendAmplitudeData(\"toggle_private\");\n      await TogglePrivacy(\"private\");\n    } else if (userInfo.privacy === \"private\") {\n      sendAmplitudeData(\"toggle_public\");\n      await TogglePrivacy(\"public\");\n    }\n    let fetchedUser = await fetchUser();\n    setUserInfo(fetchedUser);\n    setIsChanging(false);\n  };\n\n  const deleteShip = async (shipId, idx) => {\n    // delete ship api\n    console.log(myShips);\n    let res = await removeShip(shipId);\n\n    // remove from array\n    let temp = [...myShips];\n    temp.splice(idx, 1);\n    temp.sort(sortFunc);\n    setMyShips(temp);\n  };\n\n  return (\n    <div\n      style={{\n        padding: \"20px\",\n        minHeight: \"100vh\",\n        backgroundColor: \"#f6ebff\",\n      }}\n    >\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <div className=\"mx-auto\" style={{ maxWidth: \"600px\" }}>\n          <Header2 className=\"mb-2\">My Matches</Header2>\n          {/* <div\n        className=\"d-flex flex-row\"\n        style={{ overflow: \"scroll\", maxHeight: \"400px\" }}\n      > */}\n          <Row className=\"mx-auto flex-nowrap\" style={{ overflow: \"scroll\" }}>\n            {myShips.map((ship, indx) => (\n              <Votecard\n                ship={ship}\n                disabled={true}\n                userEmail={userInfo.email}\n                userName={userInfo.name}\n                deleteShip={deleteShip}\n                indx={indx}\n              />\n            ))}\n          </Row>\n          {/* </div> */}\n          <br />\n          <br />\n          <Header2 className=\"mb-2\">Questions</Header2>\n          <Body>\n            Once you fill out the questions and save, your ships will see your\n            responses!{\" \"}\n          </Body>\n          <br />\n          {userInfo.answers && (\n            <Formik\n              initialValues={{\n                contact: userInfo.answers[0],\n                restaurant: userInfo.answers[1],\n                hobby: userInfo.answers[2],\n                quarantine: userInfo.answers[3],\n                ask: userInfo.answers[4],\n              }}\n              onSubmit={async (values, { setSubmitting }) => {\n                await SaveAnswers(values);\n                setSubmitting(false);\n              }}\n            >\n              {({ errors, isSubmitting, handleSubmit }) => (\n                <Form onSubmit={handleSubmit}>\n                  <div>\n                    <Body className=\"mb-1\">How should people contact you?</Body>\n                    <StyledField name=\"contact\" className=\"otherField\" />\n                  </div>\n                  <br />\n                  <div>\n                    <Body className=\"mb-1\">Favorite New Haven restaurant?</Body>\n                    <StyledField name=\"restaurant\" className=\"otherField\" />\n                  </div>\n                  <br />\n                  <div>\n                    <Body className=\"mb-1\">Favorite quarantine hobby?</Body>\n                    <StyledField name=\"hobby\" className=\"otherField\" />\n                  </div>\n                  <br />\n                  <div>\n                    <Body className=\"mb-1\">\n                      First thing you'll do when quarantine ends?\n                    </Body>\n                    <StyledField name=\"quarantine\" className=\"otherField\" />\n                  </div>\n                  <br />\n                  <div>\n                    <Body className=\"mb-1\">Ask me about ...</Body>\n                    <StyledField name=\"ask\" className=\"otherField\" />\n                  </div>\n                  <br />\n                  <div>\n                    <MainBtn secondary type=\"submit\" disabled={isSubmitting}>\n                      Save\n                    </MainBtn>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          )}\n          <br />\n          <br />\n          <Header2 className=\"mb-2\">Privacy</Header2>\n          <Body>{info[userInfo.privacy]}</Body>\n          {isChanging ? (\n            <Spinner />\n          ) : (\n            <MainBtn secondary onClick={() => togglePrivacy()} className=\"mt-2\">\n              {userInfo.privacy === \"public\"\n                ? \"Toggle to private\"\n                : userInfo.privacy === \"private\"\n                ? \"Toggle to public\"\n                : null}\n            </MainBtn>\n          )}\n          <br />\n          <br />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Profile;\n\n// const Logout = () => {\n//   sendAmplitudeData(\"log_out\");\n//   // Clear cookies\n//   document.cookie = `connect.sid=; expires=${new Date().toUTCString()}; domain=${COOKIE_DOMAIN}; path=/`;\n//   // Redirect to home page and refresh as well\n//   // window.location.pathname = \"/\";\n// };\n",{"ruleId":"25","severity":1,"message":"26","line":40,"column":6,"nodeType":"27","endLine":40,"endColumn":8,"suggestions":"28"},{"ruleId":"29","severity":1,"message":"30","line":1,"column":17,"nodeType":"31","messageId":"32","endLine":1,"endColumn":26},{"ruleId":"29","severity":1,"message":"33","line":1,"column":28,"nodeType":"31","messageId":"32","endLine":1,"endColumn":36},{"ruleId":"29","severity":1,"message":"34","line":4,"column":10,"nodeType":"31","messageId":"32","endLine":4,"endColumn":20},{"ruleId":"29","severity":1,"message":"35","line":5,"column":10,"nodeType":"31","messageId":"32","endLine":5,"endColumn":17},{"ruleId":"29","severity":1,"message":"36","line":6,"column":10,"nodeType":"31","messageId":"32","endLine":6,"endColumn":14},{"ruleId":"29","severity":1,"message":"37","line":8,"column":10,"nodeType":"31","messageId":"32","endLine":8,"endColumn":14},{"ruleId":"29","severity":1,"message":"38","line":9,"column":10,"nodeType":"31","messageId":"32","endLine":9,"endColumn":23},{"ruleId":"29","severity":1,"message":"39","line":9,"column":25,"nodeType":"31","messageId":"32","endLine":9,"endColumn":42},{"ruleId":"29","severity":1,"message":"40","line":77,"column":9,"nodeType":"31","messageId":"32","endLine":77,"endColumn":12},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'disabled', 'ship._id', and 'userEmail'. Either include them or remove the dependency array.","ArrayExpression",["41"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'countShips' is defined but never used.","'MainBtn' is defined but never used.","'Body' is defined but never used.","'Base' is defined but never used.","'initAmplitude' is defined but never used.","'sendAmplitudeData' is defined but never used.","'res' is assigned a value but never used.",{"desc":"42","fix":"43"},"Update the dependencies array to be: [disabled, ship._id, userEmail]",{"range":"44","text":"45"},[1011,1013],"[disabled, ship._id, userEmail]"]