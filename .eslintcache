[{"/Users/maxyuan/Documents/GitHub/ship-client/src/App.js":"1","/Users/maxyuan/Documents/GitHub/ship-client/src/pages/profile.js":"2","/Users/maxyuan/Documents/GitHub/ship-client/src/components/LoadingSpinner.js":"3","/Users/maxyuan/Documents/GitHub/ship-client/src/global_styles/select.js":"4","/Users/maxyuan/Documents/GitHub/ship-client/src/pages/leaderboard.js":"5"},{"size":2162,"mtime":1612382297686,"results":"6","hashOfConfig":"7"},{"size":2993,"mtime":1612382297695,"results":"8","hashOfConfig":"7"},{"size":389,"mtime":1612163564370,"results":"9","hashOfConfig":"7"},{"size":916,"mtime":1612193807669,"results":"10","hashOfConfig":"7"},{"size":6864,"mtime":1612455578918,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"12wojvm",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Users/maxyuan/Documents/GitHub/ship-client/src/App.js",["23"],"/Users/maxyuan/Documents/GitHub/ship-client/src/pages/profile.js",[],"/Users/maxyuan/Documents/GitHub/ship-client/src/components/LoadingSpinner.js",[],"/Users/maxyuan/Documents/GitHub/ship-client/src/global_styles/select.js",[],"/Users/maxyuan/Documents/GitHub/ship-client/src/pages/leaderboard.js",["24"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Header1 } from \"../global_styles/typography\";\nimport { MainInput } from \"../global_styles/other\";\nimport { fetchShips } from \"../api/ship\";\nimport VoteCard from \"../components/VoteCard\";\nimport { Spinner } from \"../components/LoadingSpinner\";\nimport { SET_VAL } from \"../redux/masterReducer\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchUser } from \"../api/user\";\nimport { List, WindowScroller, AutoSizer } from \"react-virtualized\";\nimport { isMobile } from \"react-device-detect\";\nimport { sendAmplitudeData } from \"../util/amplitude\";\nimport Select from \"react-select\";\n\nconst sortFunc = (a, b) => {\n  return a.votes > b.votes ? -1 : 1;\n};\n\nconst colleges = [\n  { label: \"Benjamin Franklin\", value: \"New kids suck\" },\n  { label: \"Branford\", value: \"Shittiest dining hall\" },\n  { label: \"Ezra Stiles\", value: \"Kevin the goat\" },\n  { label: \"Jonathan Edwards\", value: \"Alright college ig\" },\n  { label: \"Pauli Murray\", value: \"New kids suck\" },\n  { label: \"Saybrook\", value: \"Suck at intramurals\" },\n  { label: \"Timothy Dwight\", value: \"Fucking GOATED\" },\n  { label: \"Berkeley\", value: \"Nice pizza ig\" },\n  { label: \"Davenport\", value: \"Got hella friends here\" },\n  { label: \"Grace Hopper\", value: \"Forgot this college existed\" },\n  { label: \"Morse\", value: \"Harshal the goat\" },\n  { label: \"Pierson\", value: \"L dub sucks ass\" },\n  { label: \"Silliman\", value: \"Inferior TD\" },\n  { label: \"Trumbull\", value: \"Late lunches ftw\" },\n];\n\nconst Leaderboard = () => {\n  sendAmplitudeData(\"visit_leaderboard\");\n  const dispatch = useDispatch();\n  const ships = useSelector((state) => state.state.ships);\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [searchText, setSearchText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [userVotes, setUserVotes] = useState([]);\n  const [shipInfo, setShipInfo] = useState([]);\n  const [filteredShips, setFilteredShips] = useState(ships);\n  const [selectedCollege, setSelectedCollege] = useState();\n\n  const handleVote = useCallback(\n    (id) => {\n      let temp = [...userVotes];\n      const indx = temp.indexOf(id);\n      if (indx > -1) {\n        temp.splice(indx, 1);\n      } else temp.push(id);\n      setUserVotes(temp);\n    },\n    [userVotes]\n  );\n\n  const updateShip = useCallback(\n    (indx, change) => {\n      let temp = [...shipInfo];\n      temp[indx].votes += change;\n      temp.sort(sortFunc);\n      setShipInfo(temp);\n      dispatch(SET_VAL(\"ships\", temp));\n    },\n    [dispatch, shipInfo]\n  );\n\n  useEffect(() => {\n    const onMount = async () => {\n      setIsLoading(true);\n\n      // Fetch ships info\n      let fetchedShips = await fetchShips();\n      fetchedShips.sort(sortFunc);\n      setShipInfo(fetchedShips);\n      dispatch(SET_VAL(\"ships\", fetchedShips));\n\n      // Fetch user info\n      let fetchedUser = await fetchUser();\n      setUserEmail(fetchedUser.email);\n      setUserVotes(fetchedUser.votes);\n      setIsLoading(false);\n    };\n    onMount();\n  }, [dispatch]);\n\n  useEffect(() => {\n    const filtered = shipInfo.filter((ship) => {\n      return (\n        (ship.userNames[0].toLowerCase().includes(searchText) ||\n          ship.userNames[1].toLowerCase().includes(searchText)) &&\n        (ship.userNames[0]\n          .toLowerCase()\n          .includes(\n            selectedCollege ? selectedCollege.label.toLowerCase() : \"\"\n          ) ||\n          ship.userNames[1]\n            .toLowerCase()\n            .includes(\n              selectedCollege ? selectedCollege.label.toLowerCase() : \"\"\n            ))\n      );\n    });\n\n    setFilteredShips(filtered);\n  }, [searchText, shipInfo, selectedCollege]);\n\n  let ncol = 2;\n\n  if (isMobile) {\n    ncol = 1;\n  }\n\n  const renderRow = useCallback(\n    ({ index, key, style }) => {\n      const temp_row = [];\n      for (\n        let j = index * ncol;\n        j < Math.min(filteredShips.length, (index + 1) * ncol);\n        j++\n      ) {\n        const ship = filteredShips[j];\n        temp_row.push(\n          <VoteCard\n            ship={ship}\n            userVotes={userVotes}\n            handleVote={handleVote}\n            updateShip={updateShip}\n            key={ship._id}\n            indx={j}\n            disabled={false}\n            userEmail={userEmail}\n          />\n        );\n      }\n      return (\n        <div key={key} style={style}>\n          <Row className=\"mx-auto justify-content-center\">{temp_row}</Row>\n        </div>\n      );\n    },\n    [filteredShips, handleVote, updateShip, userVotes, ncol]\n  );\n\n  return (\n    <Col className=\"p-0 fade-in w-100\">\n      <Row className=\"mx-auto justify-content-center mt-lg-5 mt-3\">\n        <Header1>Leaderboard ✌️</Header1>\n      </Row>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <div>\n          <Row className=\"mx-auto mt-3 justify-content-center\">\n            <MainInput\n              placeholder=\"Search friends' names, etc...\"\n              onChange={(e) => {\n                setSearchText(e.target.value.toLowerCase());\n              }}\n              onClick={() => sendAmplitudeData(\"click_filter\")}\n            />\n          </Row>\n          <Row className=\"mx-auto my-4 justify-content-center\">\n            <div style={{ width: \"250px\", maxWidth: \"250px\" }}>\n              <Select\n                options={colleges}\n                isClearable={true}\n                value={selectedCollege}\n                onChange={(college) => {\n                  setSelectedCollege(college);\n                }}\n              />\n            </div>\n          </Row>\n          <WindowScroller>\n            {({ height, isScrolling, onChildScroll, scrollTop }) => (\n              // Make infinite list take up 100% of its container\n              <AutoSizer disableHeight>\n                {({ width }) => (\n                  <List\n                    autoHeight\n                    width={width}\n                    height={height}\n                    isScrolling={isScrolling}\n                    onScroll={onChildScroll}\n                    scrollTop={scrollTop}\n                    rowCount={Math.ceil(filteredShips.length / ncol)}\n                    rowHeight={156}\n                    rowRenderer={renderRow}\n                    style={{ outline: \"none\" }}\n                  />\n                )}\n              </AutoSizer>\n            )}\n          </WindowScroller>\n          {/* {items} */}\n        </div>\n      )}\n    </Col>\n  );\n};\n\nexport default Leaderboard;\n\n// // CHANGE LAUNCH DATE\n// let launchDateStr = \"01-Jan-2021\";\n// var launchDate = new Date(Date.parse(launchDateStr.replace(/-/g, \" \")));\n\n// if (launchDate >= new Date()) {\n//   return (\n//     <div className=\"w-100 d-flex flex-column align-items-center mt-lg-5 mt-3\">\n//       <Header1>Coming soon ✌️</Header1>\n//     </div>\n//   );\n// }\n",{"ruleId":"25","severity":1,"message":"26","line":29,"column":7,"nodeType":"27","messageId":"28","endLine":29,"endColumn":13},{"ruleId":"29","severity":1,"message":"30","line":146,"column":5,"nodeType":"31","endLine":146,"endColumn":61,"suggestions":"32"},"no-unused-vars","'dotenv' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'userEmail'. Either include it or remove the dependency array.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [ncol, filteredShips, userVotes, handleVote, updateShip, userEmail]",{"range":"36","text":"37"},[4537,4593],"[ncol, filteredShips, userVotes, handleVote, updateShip, userEmail]"]